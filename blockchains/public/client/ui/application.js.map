{"version":3,"file":"application.js","sourceRoot":"","sources":["../../../src/client/ui/application.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAkB,MAAM,4CAA4C,CAAC;AAClF,OAAO,EAAW,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACjE,OAAO,EAAS,cAAc,EAAe,MAAM,2BAA2B,CAAC;AAC/E,OAAO,EAAE,mBAAmB,EAAE,MAAM,gCAAgC,CAAC;AACrE,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAE,wBAAwB,EAAE,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAExD,MAAM,OAAO,WAAW;IAStB,YAAqB,gBAA0B;QAA1B,qBAAgB,GAAhB,gBAAgB,CAAU;QAL/C,iBAAiB;QACA,oBAAe,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC7D,6BAAwB,GAAG,IAAI,wBAAwB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC/E,gBAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAgDrD,kBAAa,GAAG,KAAK,EAAE,KAAY,EAAiB,EAAE;YACrE,KAAK,CAAC,cAAc,EAAE,CAAC;YAEvB,0FAA0F;YAC1F,mFAAmF;YACnF,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC3D,MAAM,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAEnF,qCAAqC;YACrC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAExB,MAAM,QAAQ,GAAG,MAAM,mBAAmB,CAAC;YAC3C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC1B,CAAC,CAAC;QAkBe,yBAAoB,GAAG,CAAC,OAAgB,EAAE,EAAE;YAC3D,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACpB,KAAK,YAAY,CAAC,sBAAsB,CAAC,CAAC,OAAO,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAC;gBAC5F,KAAK,YAAY,CAAC,eAAsB,CAAC,CAAC,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;gBACrF,KAAK,YAAY,CAAC,oBAAsB,CAAC,CAAC,OAAO,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;gBAC1F,OAAO,CAAC,CAAC;oBACP,OAAO,CAAC,GAAG,CAAC,sCAAsC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC;iBACpE;aACF;QACH,CAAC,CAAA;QArFC,IAAI,CAAC,MAAM,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACjE,IAAI,CAAC,IAAI,GAAG,IAAI,cAAc,EAAE,CAAC;QAEjC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAEO,KAAK,CAAC,oBAAoB;QAChC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;QACvD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;SAClC;aAAM;YACL,MAAM,IAAI,CAAC,IAAI,CAAC,0BAA0B,EAAE,CAAC;SAC9C;QAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;;iBAGE,IAAI,CAAC,UAAU;mBACb,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;;2BAE9B,IAAI,CAAC,aAAa;cAC/B,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;;;mBAG1C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;;KAEtD,CAAC;IACJ,CAAC;IAED,IAAY,UAAU;QACpB,OAAO,IAAI,CAAA;WAEP,IAAI,CAAC,IAAI,CAAC,YAAY,CAAU,CAAC,CAAC,kCAAkC,CAAC,CAAC;YACtE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAc,CAAC,CAAC,yBAAyB,CAAC,CAAC;gBAC7D,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC;oBACpC,8BACpC;KACD,CAAC;IACJ,CAAC;IAiBO,KAAK,CAAC,QAAQ,CAAC,KAAY,EAAE,YAAY,GAAG,IAAI;QACtD,yFAAyF;QACzF,mEAAmE;QACnE,IAAI;YACF,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAChC,IAAI,YAAY,EAAE;gBAChB,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;aACrC;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC5B;QAED,2DAA2D;QAC3D,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAaO,4BAA4B,CAAC,OAAgB;QACnD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACf,IAAI,EAAE,YAAY,CAAC,uBAAuB;YAC1C,aAAa,EAAE,OAAO,CAAC,aAAa;YACpC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK;SACzB,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,OAAgB;QAClD,MAAM,YAAY,GAAG,OAAO,CAAC,OAAwB,CAAC;QACtD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAC7D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC;IAEO,KAAK,CAAC,0BAA0B,CAAC,OAAgB;QACvD,MAAM,QAAQ,GAAG,OAAO,CAAC,OAAgB,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;CACF","sourcesContent":["import { html, TemplateResult } from '../../../node_modules/lit-html/lit-html.js';\r\nimport { Message, MessageTypes } from '../../shared/messages.js';\r\nimport { Block, BlockchainNode, Transaction } from '../lib/blockchain-node.js';\r\nimport { WebsocketController } from '../lib/websocket-controller.js';\r\nimport { BlocksPanel } from './blocks-panel.js';\r\nimport { Callback, Renderable } from './common.js';\r\nimport { PendingTransactionsPanel } from './pending-transactions-panel.js';\r\nimport { TransactionForm } from './transaction-form.js';\r\n\r\nexport class Application implements Renderable<void> {\r\n  private readonly node: BlockchainNode;\r\n  private readonly server: WebsocketController;\r\n\r\n  // UI components:\r\n  private readonly transactionForm = new TransactionForm(this.requestRendering);\r\n  private readonly pendingTransactionsPanel = new PendingTransactionsPanel(this.requestRendering);\r\n  private readonly blocksPanel = new BlocksPanel(this.requestRendering);\r\n\r\n  constructor(readonly requestRendering: Callback) {\r\n    this.server = new WebsocketController(this.handleServerMessages);\r\n    this.node = new BlockchainNode();\r\n\r\n    this.requestRendering();\r\n    this.initializeBlockchain();\r\n  }\r\n\r\n  private async initializeBlockchain() {\r\n    const blocks = await this.server.requestLongestChain();\r\n    if (blocks.length > 0) {\r\n      this.node.initializeWith(blocks);\r\n    } else {\r\n      await this.node.initializeWithGenesisBlock();\r\n    }\r\n\r\n    this.requestRendering();\r\n  }\r\n\r\n  render(): TemplateResult {\r\n    return html`\r\n      <main>\r\n        <h1>Blockchain node</h1>\r\n        <aside>${this.statusLine}</aside>\r\n        <section>${this.transactionForm.render(this.node)}</section>\r\n        <section>\r\n          <form @submit=\"${this.generateBlock}\">\r\n            ${this.pendingTransactionsPanel.render(this.node)}\r\n          </form>\r\n        </section>\r\n        <section>${this.blocksPanel.render(this.node.chain)}</section>\r\n      </main>\r\n    `;\r\n  }\r\n\r\n  private get statusLine(): TemplateResult {\r\n    return html`\r\n      <p>${\r\n        this.node.chainIsEmpty          ? '‚è≥ Initializing the blockchain...' :\r\n        this.node.isMining              ? '‚è≥ Mining a new block...' :\r\n        this.node.noPendingTransactions ? 'üì© Add one or more transactions.' :\r\n                                          '‚úÖ Ready to mine a new block.'\r\n      }</p>\r\n    `;\r\n  }\r\n\r\n  private readonly generateBlock = async (event: Event): Promise<void> => {\r\n    event.preventDefault();\r\n\r\n    // Let everyone in the network know about transactions need to be added to the blockchain.\r\n    // Every node will try to generate a new block first for the provided transactions.\r\n    this.server.requestNewBlock(this.node.pendingTransactions);\r\n    const miningProcessIsDone = this.node.mineBlockWith(this.node.pendingTransactions);\r\n\r\n    // Updates status and disables forms.\r\n    this.requestRendering();\r\n\r\n    const newBlock = await miningProcessIsDone;\r\n    this.addBlock(newBlock);\r\n  };\r\n\r\n  private async addBlock(block: Block, notifyOthers = true): Promise<void> {\r\n    // The addBlock() method returns a promise that is  rejected if the block cannot be added\r\n    // to the chain. Hence wrap the addBlock() call in the try / catch.\r\n    try {\r\n      await this.node.addBlock(block);\r\n      if (notifyOthers) {\r\n        this.server.announceNewBlock(block);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n\r\n    // Updates status, enables forms and renders the new block.\r\n    this.requestRendering();\r\n  }\r\n\r\n  private readonly handleServerMessages = (message: Message) => {\r\n    switch (message.type) {\r\n      case MessageTypes.GetLongestChainRequest: return this.handleGetLongestChainRequest(message);\r\n      case MessageTypes.NewBlockRequest       : return this.handleNewBlockRequest(message);\r\n      case MessageTypes.NewBlockAnnouncement  : return this.handleNewBlockAnnouncement(message);\r\n      default: {\r\n        console.log(`Received message of unknown type: \"${message.type}\"`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleGetLongestChainRequest(message: Message): void {\r\n    this.server.send({\r\n      type: MessageTypes.GetLongestChainResponse,\r\n      correlationId: message.correlationId,\r\n      payload: this.node.chain\r\n    });\r\n  }\r\n\r\n  private async handleNewBlockRequest(message: Message): Promise<void> {\r\n    const transactions = message.payload as Transaction[];\r\n    const newBlock = await this.node.mineBlockWith(transactions);\r\n    this.addBlock(newBlock);\r\n  }\r\n\r\n  private async handleNewBlockAnnouncement(message: Message): Promise<void> {\r\n    const newBlock = message.payload as Block;\r\n    this.addBlock(newBlock, false);\r\n  }\r\n}\r\n"]}