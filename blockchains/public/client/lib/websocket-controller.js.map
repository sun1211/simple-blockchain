{"version":3,"file":"websocket-controller.js","sourceRoot":"","sources":["../../../src/client/lib/websocket-controller.ts"],"names":[],"mappings":"AAAA,OAAO,EAAW,YAAY,EAAQ,MAAM,0BAA0B,CAAC;AAEvE,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAOzC,MAAM,OAAO,mBAAmB;IAI9B,YAA6B,gBAA6C;QAA7C,qBAAgB,GAAhB,gBAAgB,CAA6B;QAFzD,0BAAqB,GAAG,IAAI,GAAG,EAAkC,CAAC;QAqBlE,sBAAiB,GAAG,CAAC,KAAmB,EAAE,EAAE;YAC3D,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAY,CAAC;YAElD,IAAI,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;gBACzD,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACvE,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;aAC1D;iBAAM;gBACL,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,wCAAwC;aACzE;QACH,CAAC,CAAA;QA3BC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IAED,IAAY,GAAG;QACb,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QACtE,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;QACtC,OAAO,GAAG,QAAQ,MAAM,QAAQ,EAAE,CAAC;IACrC,CAAC;IAEO,OAAO;QACb,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,EAAE,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnC,EAAE,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/C,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACjD,EAAE,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC;IAaD,KAAK,CAAC,IAAI,CAAC,OAAyB,EAAE,gBAAyB,KAAK;QAClE,OAAO,IAAI,OAAO,CAAU,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;YACpD,IAAI,aAAa,EAAE;gBACjB,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;aAC5E;YACD,IAAI,CAAC,SAAS,CAAC,IAAI,CACjB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EACtC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAC/D,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC;YAC5B,IAAI,EAAE,YAAY,CAAC,sBAAsB;YACzC,aAAa,EAAE,IAAI,EAAE;SACtB,EAAE,IAAI,CAAC,CAAC;QACT,OAAO,KAAK,CAAC,OAAO,CAAC;IACvB,CAAC;IAED,eAAe,CAAC,YAA2B;QACzC,IAAI,CAAC,IAAI,CAAC;YACR,IAAI,EAAE,YAAY,CAAC,eAAe;YAClC,aAAa,EAAE,IAAI,EAAE;YACrB,OAAO,EAAE,YAAY;SACtB,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB,CAAC,KAAY;QAC3B,IAAI,CAAC,IAAI,CAAC;YACR,IAAI,EAAE,YAAY,CAAC,oBAAoB;YACvC,aAAa,EAAE,IAAI,EAAE;YACrB,OAAO,EAAE,KAAK;SACf,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { Message, MessageTypes, UUID } from '../../shared/messages.js';\r\nimport { Block, Transaction } from './blockchain-node.js';\r\nimport { uuid } from './cryptography.js';\r\n\r\ninterface PromiseExecutor<T> {\r\n  resolve: (value?: T | PromiseLike<T>) => void;\r\n  reject: (reason?: any) => void;\r\n}\r\n\r\nexport class WebsocketController {\r\n  private websocket: Promise<WebSocket>;\r\n  private readonly messagesAwaitingReply = new Map<UUID, PromiseExecutor<Message>>();\r\n\r\n  constructor(private readonly messagesCallback: (messages: Message) => void) {\r\n    this.websocket = this.connect();\r\n  }\r\n\r\n  private get url(): string {\r\n    const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\r\n    const hostname = window.location.host;\r\n    return `${protocol}://${hostname}`;\r\n  }\r\n\r\n  private connect(): Promise<WebSocket> {\r\n    return new Promise((resolve, reject) => {\r\n      const ws = new WebSocket(this.url);\r\n      ws.addEventListener('open', () => resolve(ws));\r\n      ws.addEventListener('error', err => reject(err));\r\n      ws.addEventListener('message', this.onMessageReceived);\r\n    });\r\n  }\r\n\r\n  private readonly onMessageReceived = (event: MessageEvent) => {\r\n    const message = JSON.parse(event.data) as Message;\r\n\r\n    if (this.messagesAwaitingReply.has(message.correlationId)) {\r\n      this.messagesAwaitingReply.get(message.correlationId).resolve(message);\r\n      this.messagesAwaitingReply.delete(message.correlationId);\r\n    } else {\r\n      this.messagesCallback(message); // an unexpected message from the server\r\n    }\r\n  }\r\n\r\n  async send(message: Partial<Message>, awaitForReply: boolean = false): Promise<Message> {\r\n    return new Promise<Message>(async (resolve, reject) => {\r\n      if (awaitForReply) {\r\n        this.messagesAwaitingReply.set(message.correlationId, { resolve, reject });\r\n      }\r\n      this.websocket.then(\r\n        ws => ws.send(JSON.stringify(message)),\r\n        () => this.messagesAwaitingReply.delete(message.correlationId)\r\n      );\r\n    });\r\n  }\r\n\r\n  async requestLongestChain(): Promise<Block[]> {\r\n    const reply = await this.send({\r\n      type: MessageTypes.GetLongestChainRequest,\r\n      correlationId: uuid()\r\n    }, true);\r\n    return reply.payload;\r\n  }\r\n\r\n  requestNewBlock(transactions: Transaction[]): void {\r\n    this.send({\r\n      type: MessageTypes.NewBlockRequest,\r\n      correlationId: uuid(),\r\n      payload: transactions\r\n    });\r\n  }\r\n\r\n  announceNewBlock(block: Block): void {\r\n    this.send({\r\n      type: MessageTypes.NewBlockAnnouncement,\r\n      correlationId: uuid(),\r\n      payload: block\r\n    });\r\n  }\r\n}\r\n"]}