{"version":3,"file":"messages.js","sourceRoot":"","sources":["../../src/shared/messages.ts"],"names":[],"mappings":"AAaA,yFAAyF;AACzF,MAAM,CAAN,IAAY,YAKX;AALD,WAAY,YAAY;IACtB,oEAAqD,CAAA;IACrD,sEAAsD,CAAA;IACtD,qDAA6C,CAAA;IAC7C,+DAAkD,CAAA;AACpD,CAAC,EALW,YAAY,KAAZ,YAAY,QAKvB","sourcesContent":["/**\r\n * Alias string with UUID type for readability purpose. It hint that the message correlation ID\r\n * is not an arbitrary string, but represents a particular data format.\r\n */\r\nexport type UUID = string;\r\n\r\n// TODO: introduce stronger typing based on type literals.\r\nexport interface Message {\r\n  correlationId: UUID;\r\n  type: string;\r\n  payload?: any;\r\n}\r\n\r\n// TODO: find out whether request / response prefixes can be generated with mapped types.\r\nexport enum MessageTypes {\r\n  GetLongestChainRequest  = 'GET_LONGEST_CHAIN_REQUEST',\r\n  GetLongestChainResponse = 'GET_LONGEST_CHAIN_RESPONSE',\r\n  NewBlockRequest         = 'NEW_BLOCK_REQUEST',\r\n  NewBlockAnnouncement    = 'NEW_BLOCK_ANNOUNCEMENT'\r\n}\r\n"]}